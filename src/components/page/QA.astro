---
const { content } = Astro.props;
import ArrowIcon from "@assets/desc_page/arrow.svg";
---

<div class="qa" id="QA">
	<h2>Q&A</h2>
	<div class="qa-list">
		{
			content.map((item: { question: string; answer: string }, index: number) => (
				<>
					<div class="qa-item" data-open="false" data-index={index}>
						<div class="qa-question">{item.question}</div>
						<div class="qa-toggle">
							<ArrowIcon />
						</div>
					</div>
					<p style="display: none;">{item.answer}</p>
				</>
			))
		}
	</div>
</div>
<script>
	const initializeQA = () => {
		const qaItems = document.querySelectorAll(".qa-item");
		qaItems.forEach(item => {
			item.addEventListener("click", () => {
				const isOpen = item.getAttribute("data-open") === "true";
				item.setAttribute("data-open", !isOpen ? "true" : "false");

				const toggle = item.querySelector(".qa-toggle");
				if (toggle) {
					toggle.classList.toggle("open");
				}

				const answer = item.nextElementSibling as HTMLElement;
				if (answer) {
					if (!isOpen) {
						// Opening - show and start typing effect
						answer.style.display = "block";
						answer.style.height = "0";
						answer.style.opacity = "0";
						const fullText = answer.textContent || "";
						answer.textContent = "";

						// Get the natural height
						const tempHeight = answer.scrollHeight;

						// Fade in and expand
						requestAnimationFrame(() => {
							answer.style.opacity = "1";
							answer.style.height = `${tempHeight}px`;
						});

						// Typing effect
						let charIndex = 0;
						const typingSpeed = 20;
						const typeInterval = setInterval(() => {
							answer.style.transition = "none";
							if (charIndex < fullText.length) {
								answer.textContent += fullText.charAt(charIndex);
								charIndex++;
								// Update height as text grows
								answer.style.height = `${answer.scrollHeight}px`;
							} else {
								clearInterval(typeInterval);
								answer.style.height = "auto";
								answer.style.transition = "height 0.3s ease-in-out, opacity 0.3s ease-in-out";
							}
						}, typingSpeed);

						(answer as any).typingInterval = typeInterval;
					} else {
						// Closing - clear typing and hide
						if ((answer as any).typingInterval) {
							clearInterval((answer as any).typingInterval);
						}

						// Set explicit height before collapsing
						answer.style.height = `${answer.scrollHeight}px`;

						// Force reflow to ensure height is applied before transition
						answer.offsetHeight;

						// Then collapse
						requestAnimationFrame(() => {
							answer.style.opacity = "0";
							answer.style.height = "0";
						});

						setTimeout(() => {
							answer.style.display = "none";
						}, 300);
					}
				}
			});
		});
	};

	document.addEventListener("astro:page-load", () => {
		initializeQA();
	});
</script>
<style>
	.qa {
		margin-bottom: 2rem;
		color: #c4c4c4;
	}

	h2 {
		text-align: center;
		font-size: 2rem;
		margin: 1.5rem 0;
	}

	.qa-question {
		font-size: 1rem;
		font-weight: 500;
		line-height: 2;
		letter-spacing: 0.05rem;
		color: var(--white);
	}

	.qa-list {
		margin: 0 1rem;
	}

	.qa-item {
		cursor: pointer;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-radius: 1.75rem;
		background: #385e92;
		padding: 0.75rem 1.5rem;
		margin: 1rem 0;
		transition: background 0.3s ease;
	}

	.qa-item:hover {
		background: #406ba6;
	}

	.qa-toggle {
		transition: transform 0.3s ease-in-out;
	}

	.qa-toggle svg {
		width: 1.5rem;
		margin-top: 9px;
	}

	.qa-toggle.open {
		transform: rotate(180deg);
	}

	p {
		padding-inline: 1rem;
		opacity: 0;
		height: 0;
		margin: 0;
		overflow: hidden;
		transition:
			opacity 0.3s ease-in-out,
			height 0.3s ease-in-out;
	}
</style>
